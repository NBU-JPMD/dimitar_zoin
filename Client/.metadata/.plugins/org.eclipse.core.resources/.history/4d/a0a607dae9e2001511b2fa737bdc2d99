import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.Iterator;
import java.util.Set;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.nio.*;



public class Server implements Runnable {
	
	private InetAddress hostAddress;
	private int port;
	
	private ServerSocketChannel servSoCh;   //= ServerSocketChannel.open();
	private Selector selector;
	private ByteBuffer buf = ByteBuffer.allocate(1024);
	
	public Server(InetAddress hostAddress, int port) throws IOException {
	    this.hostAddress = hostAddress;
	    this.port = port;
	    this.selector = this.initSelector();
	  }
	
	//servSoCh.configureBlocking(false);		
	
	 // = Selector.open();
	SelectionKey servKey = servSoCh.register(selector, SelectionKey.OP_ACCEPT);


	while(true) {

	  int readyChannels = selector.select();
	  
	  if(readyChannels == 0) continue;


	  Set<SelectionKey> selectedKeys = selector.selectedKeys();

	  Iterator<SelectionKey> keyIterator = selectedKeys.iterator();

	  while(keyIterator.hasNext()) {

	    SelectionKey key = keyIterator.next();

	    if(key.isAcceptable()) {
	    	 SocketChannel client = servSoCh.accept();
	    	 client.configureBlocking(false);
	    	 client.register(selector, SelectionKey.OP_READ);

	    } else if (key.isReadable()) {
	    	SocketChannel client = (SocketChannel) key.channel();
	    	
	    	while(client != null){
	    		
	    		ByteBuffer buf = ByteBuffer.allocate(48);
	    		buf.clear();
	    		client.read(buf);

	    		buf.flip();

	    		while(buf.hasRemaining()) {
	    		    client.write(buf);
	    		}
	    	}
	    }

	    keyIterator.remove();
	  }
	}
}
